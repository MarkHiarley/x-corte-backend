#!/bin/bash

# ========================================
# üöÄ SCRIPT DE DEPLOY COMPLETO
# X-Corte Backend com Timezone Bras√≠lia
# ========================================

set -e  # Para na primeira falha

# Configura√ß√µes
CONTAINER_NAME="x-corte-backend"
IMAGE_NAME="x-corte-backend:latest"
PORT=5000
HEALTH_ENDPOINT="/health"
MAX_WAIT_TIME=60
TIMEZONE="America/Sao_Paulo"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log() {
    echo -e "${CYAN}[$(date +'%H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Fun√ß√£o para verificar se comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Fun√ß√£o para aguardar container ficar saud√°vel
wait_for_health() {
    local counter=0
    log "üîç Aguardando aplica√ß√£o ficar saud√°vel..."
    
    while [ $counter -lt $MAX_WAIT_TIME ]; do
        if curl -s -f "http://localhost:$PORT$HEALTH_ENDPOINT" >/dev/null 2>&1; then
            success "‚úÖ Aplica√ß√£o est√° saud√°vel!"
            return 0
        fi
        
        echo -n "."
        sleep 1
        counter=$((counter + 1))
    done
    
    error "‚ùå Timeout aguardando aplica√ß√£o ficar saud√°vel"
    return 1
}

# Fun√ß√£o para verificar pr√©-requisitos
check_prerequisites() {
    log "üîç Verificando pr√©-requisitos..."
    
    if ! command_exists docker; then
        error "Docker n√£o est√° instalado!"
        exit 1
    fi
    
    if ! command_exists curl; then
        warning "curl n√£o est√° instalado. Algumas verifica√ß√µes ser√£o puladas."
    fi
    
    if ! command_exists jq; then
        warning "jq n√£o est√° instalado. Output JSON n√£o ser√° formatado."
    fi
    
    # Verificar se Docker est√° rodando
    if ! docker info >/dev/null 2>&1; then
        error "Docker n√£o est√° rodando!"
        exit 1
    fi
    
    # Verificar se .env existe
    if [ ! -f .env ]; then
        warning ".env file n√£o encontrado. Algumas vari√°veis podem n√£o estar dispon√≠veis."
    fi
    
    # Verificar se Dockerfile existe
    if [ ! -f Dockerfile ]; then
        error "Dockerfile n√£o encontrado!"
        exit 1
    fi
    
    success "‚úÖ Pr√©-requisitos OK"
}

# Fun√ß√£o para parar container existente
stop_existing_container() {
    if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
        log "üõë Parando container existente..."
        
        # Tentar parar graciosamente
        docker stop $CONTAINER_NAME --time 30
        
        # Verificar se parou
        if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
            warning "Container n√£o parou graciosamente, for√ßando..."
            docker kill $CONTAINER_NAME
        fi
        
        success "‚úÖ Container parado com sucesso"
    else
        info "‚ÑπÔ∏è  Nenhum container ativo encontrado"
    fi
}

# Fun√ß√£o para remover container existente
remove_existing_container() {
    if [ "$(docker ps -aq -f name=$CONTAINER_NAME)" ]; then
        log "üóëÔ∏è  Removendo container existente..."
        docker rm $CONTAINER_NAME
        success "‚úÖ Container removido"
    else
        info "‚ÑπÔ∏è  Nenhum container para remover"
    fi
}

# Fun√ß√£o para construir imagem
build_image() {
    log "üî® Construindo imagem Docker..."
    
    # Limpar cache de build se necess√°rio
    if [ "$1" = "--no-cache" ]; then
        info "üßπ Construindo sem cache..."
        docker build -t $IMAGE_NAME . --no-cache
    else
        docker build -t $IMAGE_NAME .
    fi
    
    success "‚úÖ Imagem constru√≠da com sucesso"
}

# Fun√ß√£o para criar e iniciar container
start_container() {
    log "üê≥ Iniciando novo container..."
    
    # Preparar comando docker run
    DOCKER_CMD="docker run -d \
        --name $CONTAINER_NAME \
        -p $PORT:$PORT \
        -e TZ=$TIMEZONE \
        -v /etc/timezone:/etc/timezone:ro \
        -v /etc/localtime:/etc/localtime:ro \
        --restart unless-stopped"
    
    # Adicionar .env se existir
    if [ -f .env ]; then
        DOCKER_CMD="$DOCKER_CMD --env-file .env"
        info "üìÑ Carregando vari√°veis do .env"
    fi
    
    # Adicionar imagem
    DOCKER_CMD="$DOCKER_CMD $IMAGE_NAME"
    
    # Executar comando
    eval $DOCKER_CMD
    
    success "‚úÖ Container iniciado"
}

# Fun√ß√£o para verificar status do container
check_container_status() {
    log "‚è≥ Verificando status do container..."
    sleep 3
    
    if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
        success "‚úÖ Container est√° rodando"
        
        # Mostrar informa√ß√µes do container
        info "üìä Informa√ß√µes do container:"
        docker ps --filter "name=$CONTAINER_NAME" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
        
        return 0
    else
        error "‚ùå Container n√£o est√° rodando"
        return 1
    fi
}

# Fun√ß√£o para verificar timezone
check_timezone() {
    log "üåç Verificando configura√ß√£o de timezone..."
    
    # Timezone do host
    HOST_TIME=$(date)
    info "üñ•Ô∏è  Host: $HOST_TIME"
    
    # Timezone do container
    if CONTAINER_TIME=$(docker exec $CONTAINER_NAME date 2>/dev/null); then
        info "üê≥ Container: $CONTAINER_TIME"
    else
        warning "N√£o foi poss√≠vel verificar hor√°rio do container"
    fi
    
    # Vari√°vel TZ do container
    if CONTAINER_TZ=$(docker exec $CONTAINER_NAME printenv TZ 2>/dev/null); then
        info "üåç TZ env: $CONTAINER_TZ"
    else
        warning "Vari√°vel TZ n√£o definida no container"
    fi
    
    # Verificar se timezone est√° correto
    if docker exec $CONTAINER_NAME date | grep -q "\-03"; then
        success "‚úÖ Timezone configurado corretamente para Bras√≠lia"
    else
        warning "‚ö†Ô∏è  Timezone pode n√£o estar correto"
    fi
}

# Fun√ß√£o para verificar sa√∫de da aplica√ß√£o
check_application_health() {
    log "üè• Verificando sa√∫de da aplica√ß√£o..."
    
    if command_exists curl; then
        if wait_for_health; then
            # Tentar endpoints espec√≠ficos
            log "üß™ Testando endpoints..."
            
            # Health check
            if curl -s "http://localhost:$PORT$HEALTH_ENDPOINT" >/dev/null 2>&1; then
                success "‚úÖ Health endpoint OK"
            else
                warning "‚ö†Ô∏è  Health endpoint n√£o respondeu"
            fi
            
            # Debug time endpoint (se existir)
            if curl -s "http://localhost:$PORT/debug/time" >/dev/null 2>&1; then
                info "üïê Debug time endpoint dispon√≠vel"
                if command_exists jq; then
                    curl -s "http://localhost:$PORT/debug/time" | jq .
                else
                    curl -s "http://localhost:$PORT/debug/time"
                fi
            fi
            
        else
            error "‚ùå Aplica√ß√£o n√£o ficou saud√°vel no tempo esperado"
            return 1
        fi
    else
        warning "curl n√£o dispon√≠vel, pulando verifica√ß√£o de sa√∫de"
        sleep 5  # Aguardar um pouco sem verifica√ß√£o
    fi
}

# Fun√ß√£o para mostrar logs se houver falha
show_logs_on_failure() {
    if [ "$(docker ps -aq -f name=$CONTAINER_NAME)" ]; then
        error "üìã Logs do container:"
        docker logs --tail 50 $CONTAINER_NAME
    fi
}

# Fun√ß√£o para limpeza em caso de falha
cleanup_on_failure() {
    error "üí• Deploy falhou, executando limpeza..."
    
    show_logs_on_failure
    
    if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
        log "üõë Parando container com falha..."
        docker stop $CONTAINER_NAME
    fi
    
    if [ "$(docker ps -aq -f name=$CONTAINER_NAME)" ]; then
        log "üóëÔ∏è  Removendo container com falha..."
        docker rm $CONTAINER_NAME
    fi
}

# Fun√ß√£o para mostrar informa√ß√µes finais
show_final_info() {
    success "üéâ Deploy conclu√≠do com sucesso!"
    
    echo ""
    echo "========================================="
    echo "üåê APLICA√á√ÉO DISPON√çVEL EM:"
    echo "   http://localhost:$PORT"
    echo ""
    echo "üìö DOCUMENTA√á√ÉO DA API:"
    echo "   http://localhost:$PORT/docs"
    echo ""
    echo "üß™ TESTAR LEMBRETES:"
    echo "   curl \"http://localhost:$PORT/bookings/test-now?phone=11987654321\""
    echo ""
    echo "üìä VERIFICAR LEMBRETES ATIVOS:"
    echo "   curl \"http://localhost:$PORT/bookings/active-reminders\""
    echo ""
    echo "üïê VERIFICAR TIMEZONE:"
    echo "   curl \"http://localhost:$PORT/debug/time\""
    echo ""
    echo "üìã VER LOGS:"
    echo "   docker logs $CONTAINER_NAME -f"
    echo "========================================="
}

# Fun√ß√£o principal
main() {
    echo ""
    echo "========================================="
    echo "üöÄ X-CORTE BACKEND DEPLOYMENT"
    echo "üåç Timezone: $TIMEZONE"
    echo "üê≥ Container: $CONTAINER_NAME"
    echo "üéØ Port: $PORT"
    echo "========================================="
    echo ""
    
    # Trap para limpeza em caso de falha
    trap cleanup_on_failure ERR
    
    # Executar etapas do deploy
    check_prerequisites
    stop_existing_container
    remove_existing_container
    
    # Build com ou sem cache
    if [ "$1" = "--no-cache" ]; then
        build_image --no-cache
    else
        build_image
    fi
    
    start_container
    
    # Verifica√ß√µes p√≥s-deploy
    if check_container_status; then
        check_timezone
        check_application_health
        show_final_info
    else
        show_logs_on_failure
        exit 1
    fi
}

# Verificar argumentos
case "$1" in
    -h|--help)
        echo "Uso: $0 [op√ß√µes]"
        echo ""
        echo "Op√ß√µes:"
        echo "  --no-cache    Construir imagem sem usar cache"
        echo "  -h, --help    Mostrar esta ajuda"
        echo ""
        echo "Exemplos:"
        echo "  $0              # Deploy normal"
        echo "  $0 --no-cache   # Deploy sem cache"
        exit 0
        ;;
    --no-cache)
        main --no-cache
        ;;
    "")
        main
        ;;
    *)
        error "Op√ß√£o inv√°lida: $1"
        echo "Use $0 --help para ver as op√ß√µes dispon√≠veis"
        exit 1
        ;;
esac